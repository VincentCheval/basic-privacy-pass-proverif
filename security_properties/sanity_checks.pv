restriction id:id, sk:bs_skey, pk:bs_pkey;
  event(CompromisedBS(id,sk,pk))
.

(* Sanity check queries *)

query idP:id_proc, req:bitstring;
  event(ClientRequest(idP,req))
.

query idP:id_proc, cid:id, token_request:bitstring;
  event(AttesterForwardRequest(idP,cid,token_request))
.

query idP:id_proc; event(IssuanceSuccess(idP)).

query idP:id_proc; event(RedeemerAccepts(idP,true)).

set preciseActions = true.

process
    (* Generates the participants *)
    generate_participants
  |
  !
  new c_CA:channel;
  new c_AC:channel;
  new c_RC:channel;
  new c_CR:channel;
  new c_AI:channel;
  new c_IA:channel;
  (
    (* Running the issuers *)
    let bs = UnforgeableBS in
    get issuer_data(id_I,sk_I,pk_I) in

    (* Name used only to link events in the queries. Not used in the processes. *)
    new idP_I[]: id_proc;

    Issuer(idP_I,c_IA,c_AI,id_I,bs,sk_I)
  ) | (
    (* Running the redeemers *)
    in(adv,reveal_context:bool);
    let bs = UnforgeableBS in
    get issuer_data(id_I,sk_I,pk_I) in

    let pk_I:bs_pkey = get_public_issuer_data(id_I) in
    new n_R:random;

    (* Name used only to link events in the queries. Not used in the processes. *)
    new idP_R[]: id_proc;

    Redeemer(idP_R,c_RC,c_CR,reveal_context,id_I,pk_I,n_R,bs)
  ) | (
    get client_data(cid) in
    (
      in(adv,use_proxyR:bool);
      in(adv,use_proxyI:bool);
      let bs = UnforgeableBS in

      new n_C:random;

      (* Name used only to link events in the queries. Not used in the processes. *)
      new idP_C[]: id_proc;

      Client(idP_C,use_proxyR,use_proxyI,cid,n_C,
        c_CA,c_AC,c_CR,c_RC,
        bs
      )
    ) | (
      (* Name used only to link events in the queries. Not used in the processes. *)
      new idP_A[]: id_proc;

      Attester(idP_A,c_AC,c_CA,c_AI,c_IA)
    )
  )
